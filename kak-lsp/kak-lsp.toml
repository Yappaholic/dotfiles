snippet_support = true
verbosity = 2

[server]
# exit session if no requests were received during given period in seconds
# set to 0 to disable
timeout = 1800 # seconds = 30 minutes

# This section overrides language IDs.
# By default, kakoune-lsp uses filetypes for the IDs.
# See https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentItem
[language_ids]
c = "c_cpp"
cpp = "c_cpp"
javascript = "javascriptreact"
typescript = "typescriptreact"
protobuf = "proto"
sh = "shellscript"

[language_server.bash-language-server]
filetypes = ["sh"]
roots = [".git", ".hg"]
command = "bash-language-server"
args = ["start"]

[language_server.clangd]
filetypes = ["c", "cpp"]
roots = ["compile_commands.json", ".clangd", ".git", ".hg"]
command = "clangd"

[language_server.cmake-language-server]
filetypes = ["cmake"]
roots = ["CMakeLists.txt", ".git", ".hg"]
command = "cmake-language-server"

[language_server.css-language-server]
filetypes = ["css"]
roots = ["package.json", ".git", ".hg", ".js"]
command = "vscode-css-language-server"
args = ["--stdio"]

[language_server.tailwind]
filetypes = ["html"]
roots = []
command = "tailwindcss-language-server"
args = ["--stdio"]

[language_server.less-language-server]
filetypes = ["less"]
roots = ["package.json", ".git", ".hg"]
command = "vscode-css-language-server"
args = ["--stdio"]

[language_server.nil]
filetypes = ["nix"]
command = "nil"
roots = ["flake.nix", "shell.nix", ".git", ".hg"]

[language_server.scss-language-server]
filetypes = ["scss"]
roots = ["package.json", ".git", ".hg"]
command = "vscode-css-language-server"
args = ["--stdio"]
[language_server.gopls]
filetypes = ["go","templ"]
roots = ["Gopkg.toml", "go.mod", ".git", ".hg"]
command = "gopls"
[language_server.gopls.settings.gopls]
# See https://github.com/golang/tools/blob/master/gopls/doc/settings.md
# "build.buildFlags" = []
hints.assignVariableTypes = true
hints.compositeLiteralFields = true
hints.compositeLiteralTypes = true
hints.constantValues = true
hints.functionTypeParameters = true
hints.parameterNames = true
hints.rangeVariableTypes = true
"ui.completion.usePlaceholders" = true

# [language_server.htmx-lsp2]
# filetypes = ["templ", "html"]
# command = "htmx-lsp"
# roots = ["go.mod", "package.json"]
# args = ["-f", "/home/savvy/out.txt", "--level", "TRACE"]
# settings_section = "htmx-lsp2"

# [language_server.htmx-lsp2.settings.htmx-lsp2]
# "lang" = "go"
# "template_ext" = "templ"
# "templates" = ["./views"]
# "js_tags" = []
# "backend_tags" = []

[language_server.templ]
filetypes = ["templ"]
roots = ["index.templ"]
command = "templ"
args = ["lsp"]

[language_server.haskell-language-server]
filetypes = ["haskell"]
roots = ["hie.yaml", "cabal.project", "Setup.hs", "stack.yaml", "*.cabal"]
command = "haskell-language-server-wrapper"
args = ["--lsp"]

[language_server.html-language-server]
filetypes = ["html"]
roots = ["package.json", "go.mod"]
command = "vscode-html-language-server"
args = ["--stdio"]

[language_server.emmet-ls]
filetypes = ["html"]
roots = ["package.json", "go.mod"]
command = "emmet-ls"
args = ["--stdio"]

[language_server.json-language-server]
filetypes = ["json"]
roots = ["package.json"]
command = "vscode-json-language-server"
args = ["--stdio"]

[language_server.lua-language-server]
filetypes = ["lua"]
roots = [".git", ".hg"]
command = "lua-language-server"
settings_section = "Lua"
[language_server.lua-language-server.settings.Lua]
# See https://github.com/sumneko/vscode-lua/blob/master/setting/schema.json
# diagnostics.enable = true

[language_server.markdown]
filetypes = ["markdown"]
roots = [".marksman.toml"]
command = "marksman"
args = ["server"]

[language_server.nimlsp]
filetypes = ["nim"]
roots = ["*.nimble", ".git", ".hg"]
command = "nimlsp"

[language_server.ocamllsp]
filetypes = ["ocaml"]
# Often useful to simply do a `touch dune-workspace` in your project root folder if you have problems with root detection
roots = ["dune-workspace", "dune-project", "Makefile", "opam", "*.opam", "esy.json", ".git", ".hg", "dune"]
command = "ocamllsp"

[language_server.purescript-language-server]
filetypes = ["purescript"]
roots = ["spago.dhall", "spago.yaml", "package.json", ".git", ".hg"]
command = "purescript-language-server"
args = ["--stdio"]

[language_server.pylsp]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "pylsp"
settings_section = "_"
[language_server.pylsp.settings._]
# See https://github.com/python-lsp/python-lsp-server#configuration
# pylsp.configurationSources = ["flake8"]
pylsp.plugins.jedi_completion.include_params = true


[language_server.rust-analyzer]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "sh"
args = [
    "-c",
    """
        if path=$(rustup which rust-analyzer 2>/dev/null); then
            exec "$path"
        else
            exec rust-analyzer
        fi
    """,
]
[language_server.rust-analyzer.settings.rust-analyzer]
# See https://rust-analyzer.github.io/manual.html#configuration
# cargo.fheck.command = "clippy"



[language_server.taplo]
filetypes = ["toml"]
roots = [".git", ".hg"]
command = "taplo"
args = ["lsp", "stdio"]

[language_server.typescript-language-server]
filetypes = ["javascript", "typescript"]
roots = ["package.json", "tsconfig.json", "jsconfig.json", ".git", ".hg"]
command = "typescript-language-server"
args = ["--stdio"]
[language_server.typescript-language-server.settings]
format = {enable = true}
# quotePreference = "double"
# typescript.format.semicolons = "insert"

[language_server.biome]
filetypes = ["typescript", "javascript"]
roots = ["biome.json", "package.json", "tsconfig.json", "jsconfig.json", ".git", ".hg"]
command = "biome"
args = ["lsp-proxy"]
[language_server.biome.settings]
format = {enable = true}


[language_server.yaml-language-server]
filetypes = ["yaml"]
roots = [".git", ".hg"]
command = "yaml-language-server"
args = ["--stdio"]
settings_section = "yaml"
[language_server.yaml-language-server.settings.yaml]
# See https://github.com/redhat-developer/yaml-language-server#language-server-settings
# Defaults are at https://github.com/redhat-developer/yaml-language-server/blob/master/src/yamlSettings.ts
# format.enable = true

[language_server.zls]
filetypes = ["zig"]
roots = ["build.zig"]
command = "zls"

# Semantic tokens support
# See https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_semanticTokens
# for the default list of tokens and modifiers.
# However, many language servers implement their own values.
# Make sure to check the output of `lsp-capabilities` and each server's documentation and source code as well.
# Examples:
# - TypeScript: https://github.com/microsoft/vscode-languageserver-node/blob/main/client/src/common/semanticTokens.ts
# - Rust Analyzer: https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ide/src/syntax_highlighting.rs
[semantic_tokens]
faces = [
    {face="documentation", token="comment", modifiers=["documentation"]},
    {face="comment", token="comment"},
    {face="function", token="function"},
    {face="keyword", token="keyword"},
    {face="module", token="namespace"},
    {face="operator", token="operator"},
    {face="string", token="string"},
    {face="type", token="type"},
    {face="default+d", token="variable", modifiers=["readonly"]},
    {face="default+d", token="variable", modifiers=["constant"]},
    {face="variable", token="variable"},
]

