
{"level":"INFO","message":"starting generic LSP server","target":"lsp","timestamp":1722705847459}
{"level":"INFO","message":"STARTING EXAMPLE MAIN LOOP","target":"lsp","timestamp":1722705847906}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didOpen\", params: Object {\"textDocument\": Object {\"languageId\": String(\"html\"), \"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\"), \"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(1)}} })","module":"lsp","target":"lsp","timestamp":1722705847907}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didOpen\", params: Object {\"textDocument\": Object {\"languageId\": String(\"html\"), \"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\"), \"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(1)}} })","module":"lsp","target":"lsp","timestamp":1722705847907}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"workspace/didChangeConfiguration\", params: Object {\"settings\": Null} })","module":"lsp","target":"lsp","timestamp":1722705847907}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(22)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705854298}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705854298}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705854298}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705854298}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(2)}} })","module":"lsp","target":"lsp","timestamp":1722705854372}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(3)}} })","module":"lsp","target":"lsp","timestamp":1722705855226}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(28)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705855226}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705855226}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705855226}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705855226}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(4)}} })","module":"lsp","target":"lsp","timestamp":1722705855316}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(28)} })","module":"lsp","target":"lsp","timestamp":1722705855321}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(30)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705855321}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705855321}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705855321}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705855321}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(5)}} })","module":"lsp","target":"lsp","timestamp":1722705855861}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(30)} })","module":"lsp","target":"lsp","timestamp":1722705855861}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(34)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705855861}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705855861}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705855861}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705855861}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(6)}} })","module":"lsp","target":"lsp","timestamp":1722705856786}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(34)} })","module":"lsp","target":"lsp","timestamp":1722705856787}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(38)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705856787}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705856787}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705856787}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705856787}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-ge id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(7)}} })","module":"lsp","target":"lsp","timestamp":1722705856858}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(38)} })","module":"lsp","target":"lsp","timestamp":1722705856858}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(44)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705856858}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705856858}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705856858}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705856858}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(8)}} })","module":"lsp","target":"lsp","timestamp":1722705857345}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(44)} })","module":"lsp","target":"lsp","timestamp":1722705857345}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(48)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705857345}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705857345}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705857345}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705857345}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(9)}} })","module":"lsp","target":"lsp","timestamp":1722705857654}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(48)} })","module":"lsp","target":"lsp","timestamp":1722705857654}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(52)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705857654}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705857654}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705857654}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705857654}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(10)}} })","module":"lsp","target":"lsp","timestamp":1722705858014}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(52)} })","module":"lsp","target":"lsp","timestamp":1722705858014}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(54)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705858014}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705858014}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705858014}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705858014}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(11)}} })","module":"lsp","target":"lsp","timestamp":1722705858146}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(54)} })","module":"lsp","target":"lsp","timestamp":1722705858147}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(58)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705858147}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705858147}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705858147}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705858147}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(12)}} })","module":"lsp","target":"lsp","timestamp":1722705858307}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(13)}} })","module":"lsp","target":"lsp","timestamp":1722705859155}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(58)} })","module":"lsp","target":"lsp","timestamp":1722705859156}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(65)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705859156}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705859156}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705859156}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705859156}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(14)}} })","module":"lsp","target":"lsp","timestamp":1722705859237}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(65)} })","module":"lsp","target":"lsp","timestamp":1722705859237}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(68)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705859238}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705859238}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705859238}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705859238}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(15)}} })","module":"lsp","target":"lsp","timestamp":1722705859986}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(68)} })","module":"lsp","target":"lsp","timestamp":1722705859987}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(72)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705859987}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705859987}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705859987}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705859987}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(16)}} })","module":"lsp","target":"lsp","timestamp":1722705860142}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(17)}} })","module":"lsp","target":"lsp","timestamp":1722705860414}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(72)} })","module":"lsp","target":"lsp","timestamp":1722705860416}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(76)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705860416}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705860416}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705860416}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705860416}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(76)} })","module":"lsp","target":"lsp","timestamp":1722705890351}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(84)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705890351}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705890351}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705890351}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705890351}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(18)}} })","module":"lsp","target":"lsp","timestamp":1722705890421}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(19)}} })","module":"lsp","target":"lsp","timestamp":1722705892313}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(84)} })","module":"lsp","target":"lsp","timestamp":1722705892313}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(89)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705892313}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705892313}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705892313}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705892313}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(20)}} })","module":"lsp","target":"lsp","timestamp":1722705892402}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(89)} })","module":"lsp","target":"lsp","timestamp":1722705892402}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(95)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705892402}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705892402}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705892402}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705892402}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(21)}} })","module":"lsp","target":"lsp","timestamp":1722705892724}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(95)} })","module":"lsp","target":"lsp","timestamp":1722705892725}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(99)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705892725}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705892725}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705892725}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705892725}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(22)}} })","module":"lsp","target":"lsp","timestamp":1722705893283}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(99)} })","module":"lsp","target":"lsp","timestamp":1722705893284}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(101)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705893284}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705893284}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705893284}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705893284}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(23)}} })","module":"lsp","target":"lsp","timestamp":1722705894017}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(101)} })","module":"lsp","target":"lsp","timestamp":1722705894018}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(105)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705894018}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705894018}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705894018}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705894018}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(24)}} })","module":"lsp","target":"lsp","timestamp":1722705894332}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(105)} })","module":"lsp","target":"lsp","timestamp":1722705894332}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(111)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705894332}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705894332}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705894332}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705894332}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(25)}} })","module":"lsp","target":"lsp","timestamp":1722705895013}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(111)} })","module":"lsp","target":"lsp","timestamp":1722705895015}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(115)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705895015}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705895015}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705895015}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705895016}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(26)}} })","module":"lsp","target":"lsp","timestamp":1722705895701}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(115)} })","module":"lsp","target":"lsp","timestamp":1722705895702}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(117)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705895702}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705895702}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705895702}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705895702}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(27)}} })","module":"lsp","target":"lsp","timestamp":1722705898653}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(117)} })","module":"lsp","target":"lsp","timestamp":1722705898654}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(123)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705898654}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705898654}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705898654}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705898654}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swa id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(28)}} })","module":"lsp","target":"lsp","timestamp":1722705898835}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(123)} })","module":"lsp","target":"lsp","timestamp":1722705898835}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(126)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(13), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705898836}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705898836}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705898836}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705898836}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swap id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(29)}} })","module":"lsp","target":"lsp","timestamp":1722705899489}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(126)} })","module":"lsp","target":"lsp","timestamp":1722705899489}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(131)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(14), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705899490}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705899490}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 14 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705899490}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705899490}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swa id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(30)}} })","module":"lsp","target":"lsp","timestamp":1722705900539}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(131)} })","module":"lsp","target":"lsp","timestamp":1722705900541}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(134)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(13), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705900541}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705900541}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705900542}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705900542}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(31)}} })","module":"lsp","target":"lsp","timestamp":1722705900867}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(134)} })","module":"lsp","target":"lsp","timestamp":1722705900868}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(139)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705900868}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705900868}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705900868}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705900868}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(32)}} })","module":"lsp","target":"lsp","timestamp":1722705900999}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(139)} })","module":"lsp","target":"lsp","timestamp":1722705901000}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(141)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705901000}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901000}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901000}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901000}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(33)}} })","module":"lsp","target":"lsp","timestamp":1722705901145}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(141)} })","module":"lsp","target":"lsp","timestamp":1722705901145}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(147)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705901145}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901145}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901145}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901145}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(34)}} })","module":"lsp","target":"lsp","timestamp":1722705901587}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(147)} })","module":"lsp","target":"lsp","timestamp":1722705901588}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(150)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705901588}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901588}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901588}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901588}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(35)}} })","module":"lsp","target":"lsp","timestamp":1722705901758}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(150)} })","module":"lsp","target":"lsp","timestamp":1722705901759}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(154)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705901759}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901759}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901759}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705901759}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(36)}} })","module":"lsp","target":"lsp","timestamp":1722705902053}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(37)}} })","module":"lsp","target":"lsp","timestamp":1722705902246}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(154)} })","module":"lsp","target":"lsp","timestamp":1722705902249}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(159)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722705902249}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722705902249}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722705902249}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722705902249}
{"file":"lsp/src/lib.rs","level":"WARN","line":150,"message":"shutting down server","module":"lsp","target":"lsp","timestamp":1722705905543}
{"level":"INFO","message":"starting generic LSP server","target":"lsp","timestamp":1722706052976}
{"level":"INFO","message":"STARTING EXAMPLE MAIN LOOP","target":"lsp","timestamp":1722706052978}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didOpen\", params: Object {\"textDocument\": Object {\"languageId\": String(\"html\"), \"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\"), \"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(0)}} })","module":"lsp","target":"lsp","timestamp":1722706052982}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(1)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706057147}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057147}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057147}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057147}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057147}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 6 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057147}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057153}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(1)}} })","module":"lsp","target":"lsp","timestamp":1722706057224}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(2)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\" \"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(7), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706057238}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057238}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 7 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\" \") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057238}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057238}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div  id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057238}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 7 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057238}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057239}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(2)}} })","module":"lsp","target":"lsp","timestamp":1722706057458}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(3)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706057471}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057471}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057471}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057471}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div h id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057471}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 8 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057471}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057472}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(3)}} })","module":"lsp","target":"lsp","timestamp":1722706057551}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(4)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706057564}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057564}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057564}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057564}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div hx id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057564}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 9 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706057564}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706057566}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(4)}} })","module":"lsp","target":"lsp","timestamp":1722706058128}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(5)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\"-\"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706058141}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706058141}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706058141}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706058141}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div hx- id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706058141}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 10 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706058141}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706058142}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(5)}} })","module":"lsp","target":"lsp","timestamp":1722706061774}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-ge id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(6)}} })","module":"lsp","target":"lsp","timestamp":1722706061841}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(7)}} })","module":"lsp","target":"lsp","timestamp":1722706065388}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(8)}} })","module":"lsp","target":"lsp","timestamp":1722706065548}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(9)}} })","module":"lsp","target":"lsp","timestamp":1722706065699}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(10)}} })","module":"lsp","target":"lsp","timestamp":1722706066469}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(6)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\"-\"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706066483}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706066483}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706066483}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706066483}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div hx- id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706066483}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 10 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706066483}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706066487}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-t id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(11)}} })","module":"lsp","target":"lsp","timestamp":1722706066846}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-ta id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(12)}} })","module":"lsp","target":"lsp","timestamp":1722706066953}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-tag id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(13)}} })","module":"lsp","target":"lsp","timestamp":1722706067192}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-ta id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(14)}} })","module":"lsp","target":"lsp","timestamp":1722706067839}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-tar id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(15)}} })","module":"lsp","target":"lsp","timestamp":1722706067991}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-targ id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(16)}} })","module":"lsp","target":"lsp","timestamp":1722706068213}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-targe id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(17)}} })","module":"lsp","target":"lsp","timestamp":1722706068330}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-target id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(18)}} })","module":"lsp","target":"lsp","timestamp":1722706068491}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-targe id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(19)}} })","module":"lsp","target":"lsp","timestamp":1722706068771}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-targ id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(20)}} })","module":"lsp","target":"lsp","timestamp":1722706068924}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-tar id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(21)}} })","module":"lsp","target":"lsp","timestamp":1722706069070}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-ta id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(22)}} })","module":"lsp","target":"lsp","timestamp":1722706069203}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-t id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(23)}} })","module":"lsp","target":"lsp","timestamp":1722706069342}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(24)}} })","module":"lsp","target":"lsp","timestamp":1722706069480}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(25)}} })","module":"lsp","target":"lsp","timestamp":1722706069893}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(26)}} })","module":"lsp","target":"lsp","timestamp":1722706070051}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(27)}} })","module":"lsp","target":"lsp","timestamp":1722706070388}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(28)}} })","module":"lsp","target":"lsp","timestamp":1722706071169}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didSave\", params: Object {\"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706072746}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(7)), method: \"shutdown\", params: Null })","module":"lsp","target":"lsp","timestamp":1722706072746}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706072746}
{"file":"lsp/src/handle.rs","level":"WARN","line":172,"message":"unhandled request: Request { id: RequestId(I32(7)), method: \"shutdown\", params: Null }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706072746}
{"level":"INFO","message":"starting generic LSP server","target":"lsp","timestamp":1722706094820}
{"level":"INFO","message":"STARTING EXAMPLE MAIN LOOP","target":"lsp","timestamp":1722706094820}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didOpen\", params: Object {\"textDocument\": Object {\"languageId\": String(\"html\"), \"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\"), \"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(0)}} })","module":"lsp","target":"lsp","timestamp":1722706094821}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(1)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706099421}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706099421}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706099421}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706099421}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706099421}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 6 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706099421}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706099426}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(1)}} })","module":"lsp","target":"lsp","timestamp":1722706099507}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(2)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\" \"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(7), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706099520}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706099520}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 7 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\" \") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706099520}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706099520}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div  id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706099520}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 7 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706099520}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706099521}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(2)}} })","module":"lsp","target":"lsp","timestamp":1722706100134}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(3)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706100147}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706100147}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706100147}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706100147}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div h id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706100147}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 8 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706100147}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706100148}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(3)}} })","module":"lsp","target":"lsp","timestamp":1722706100199}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(4)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706100212}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706100212}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706100212}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706100212}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div hx id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706100212}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 9 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706100212}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706100213}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(4)}} })","module":"lsp","target":"lsp","timestamp":1722706101022}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(5)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\"-\"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706101035}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706101035}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706101035}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706101035}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div hx- id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706101035}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 10 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706101035}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706101036}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(5)}} })","module":"lsp","target":"lsp","timestamp":1722706104215}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(6)}} })","module":"lsp","target":"lsp","timestamp":1722706104427}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swa id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(7)}} })","module":"lsp","target":"lsp","timestamp":1722706104512}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swap id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(8)}} })","module":"lsp","target":"lsp","timestamp":1722706105278}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(12)}} })","module":"lsp","target":"lsp","timestamp":1722706112422}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-swap id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(13)}} })","module":"lsp","target":"lsp","timestamp":1722706112422}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-swa id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(14)}} })","module":"lsp","target":"lsp","timestamp":1722706112422}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(15)}} })","module":"lsp","target":"lsp","timestamp":1722706112726}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(16)}} })","module":"lsp","target":"lsp","timestamp":1722706112746}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(17)}} })","module":"lsp","target":"lsp","timestamp":1722706112767}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(18)}} })","module":"lsp","target":"lsp","timestamp":1722706112789}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(19)}} })","module":"lsp","target":"lsp","timestamp":1722706112809}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(20)}} })","module":"lsp","target":"lsp","timestamp":1722706112830}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(21)}} })","module":"lsp","target":"lsp","timestamp":1722706113008}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(22)}} })","module":"lsp","target":"lsp","timestamp":1722706113163}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(23)}} })","module":"lsp","target":"lsp","timestamp":1722706113317}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(24)}} })","module":"lsp","target":"lsp","timestamp":1722706113851}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(6)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(9), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706124105}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124105}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124105}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124105}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124105}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 9 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124105}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124106}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script  type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(25)}} })","module":"lsp","target":"lsp","timestamp":1722706124166}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(7)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\" \"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(10), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706124179}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124179}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\" \") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124179}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124179}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script  type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124179}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 10 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124179}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124180}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(26)}} })","module":"lsp","target":"lsp","timestamp":1722706124423}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(8)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(11), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706124439}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124439}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124440}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124440}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script h type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124440}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 11 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124440}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124443}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(27)}} })","module":"lsp","target":"lsp","timestamp":1722706124507}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(9)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(12), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706124521}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124521}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124521}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124522}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124522}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 12 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124522}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124525}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(28)}} })","module":"lsp","target":"lsp","timestamp":1722706124694}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(10)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\"-\"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(13), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706124708}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124709}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124709}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124709}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx- type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124709}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 13 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706124709}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706124712}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-g type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(29)}} })","module":"lsp","target":"lsp","timestamp":1722706126071}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-ge type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(30)}} })","module":"lsp","target":"lsp","timestamp":1722706126155}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-get type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(31)}} })","module":"lsp","target":"lsp","timestamp":1722706126332}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(35)}} })","module":"lsp","target":"lsp","timestamp":1722706128472}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx-get type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(36)}} })","module":"lsp","target":"lsp","timestamp":1722706128473}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx-ge type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(37)}} })","module":"lsp","target":"lsp","timestamp":1722706128473}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx-g type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(38)}} })","module":"lsp","target":"lsp","timestamp":1722706128777}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(39)}} })","module":"lsp","target":"lsp","timestamp":1722706128796}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(40)}} })","module":"lsp","target":"lsp","timestamp":1722706128816}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(41)}} })","module":"lsp","target":"lsp","timestamp":1722706128836}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(42)}} })","module":"lsp","target":"lsp","timestamp":1722706129053}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(43)}} })","module":"lsp","target":"lsp","timestamp":1722706129218}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(44)}} })","module":"lsp","target":"lsp","timestamp":1722706129347}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script  type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(45)}} })","module":"lsp","target":"lsp","timestamp":1722706129501}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(46)}} })","module":"lsp","target":"lsp","timestamp":1722706129971}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(11)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(11), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706129984}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706129984}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706129984}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706129984}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script h type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706129984}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 11 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706129984}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706129985}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(47)}} })","module":"lsp","target":"lsp","timestamp":1722706130064}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(12)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(12), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706130077}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706130077}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706130077}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706130077}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706130077}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 12 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706130077}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706130078}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(48)}} })","module":"lsp","target":"lsp","timestamp":1722706130763}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(13)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\"-\"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(13), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706130776}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706130776}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706130776}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706130776}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx- type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706130776}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 13 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706130776}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706130777}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx-params type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(101)}} })","module":"lsp","target":"lsp","timestamp":1722706142578}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx-param type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(102)}} })","module":"lsp","target":"lsp","timestamp":1722706142578}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx-para type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(103)}} })","module":"lsp","target":"lsp","timestamp":1722706142884}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx-par type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(104)}} })","module":"lsp","target":"lsp","timestamp":1722706142902}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx-pa type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(105)}} })","module":"lsp","target":"lsp","timestamp":1722706142922}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx-p type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(106)}} })","module":"lsp","target":"lsp","timestamp":1722706142943}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(107)}} })","module":"lsp","target":"lsp","timestamp":1722706142963}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(108)}} })","module":"lsp","target":"lsp","timestamp":1722706142984}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(109)}} })","module":"lsp","target":"lsp","timestamp":1722706143003}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(110)}} })","module":"lsp","target":"lsp","timestamp":1722706143182}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(111)}} })","module":"lsp","target":"lsp","timestamp":1722706143344}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(112)}} })","module":"lsp","target":"lsp","timestamp":1722706143587}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script  type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(113)}} })","module":"lsp","target":"lsp","timestamp":1722706143752}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(114)}} })","module":"lsp","target":"lsp","timestamp":1722706144311}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(14)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(11), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706144324}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706144324}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706144324}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706144324}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script h type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706144324}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 11 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706144324}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706144325}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(115)}} })","module":"lsp","target":"lsp","timestamp":1722706144377}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(15)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(12), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706144390}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706144390}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706144390}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706144390}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706144390}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 12 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706144390}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706144391}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(16)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(12), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706147125}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706147125}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706147125}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706147125}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706147125}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 12 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706147125}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706147126}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(116)}} })","module":"lsp","target":"lsp","timestamp":1722706148051}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(17)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\"-\"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(13), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706148064}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706148064}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706148064}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706148064}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx- type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706148064}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 13 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706148064}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706148065}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script <hx-></hx-> type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(119)}} })","module":"lsp","target":"lsp","timestamp":1722706149559}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(120)}} })","module":"lsp","target":"lsp","timestamp":1722706149736}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(18)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\"-\"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(13), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706152326}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706152326}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706152326}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706152326}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx- type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706152326}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 13 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706152326}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706152327}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(121)}} })","module":"lsp","target":"lsp","timestamp":1722706152494}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(122)}} })","module":"lsp","target":"lsp","timestamp":1722706152643}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script  type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(123)}} })","module":"lsp","target":"lsp","timestamp":1722706152783}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(124)}} })","module":"lsp","target":"lsp","timestamp":1722706153339}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(19)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(11), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706153352}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706153352}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706153352}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706153352}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script h type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706153352}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 11 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706153352}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706153353}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(125)}} })","module":"lsp","target":"lsp","timestamp":1722706153402}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(20)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(12), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706153417}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706153417}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706153417}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706153417}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706153417}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 12 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706153417}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706153418}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(126)}} })","module":"lsp","target":"lsp","timestamp":1722706153593}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(21)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\"-\"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(13), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706153608}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706153608}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706153608}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706153608}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx- type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706153608}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 13 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706153608}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706153612}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-g type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(127)}} })","module":"lsp","target":"lsp","timestamp":1722706154057}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-ge type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(128)}} })","module":"lsp","target":"lsp","timestamp":1722706154159}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-g type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(129)}} })","module":"lsp","target":"lsp","timestamp":1722706156441}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(130)}} })","module":"lsp","target":"lsp","timestamp":1722706156610}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-o type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(131)}} })","module":"lsp","target":"lsp","timestamp":1722706157407}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-op type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(132)}} })","module":"lsp","target":"lsp","timestamp":1722706157411}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(22)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(15), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706157424}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706157424}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 15 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706157424}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706157424}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx-op type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706157424}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 15 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706157424}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706157425}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-opo type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(133)}} })","module":"lsp","target":"lsp","timestamp":1722706157514}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(23)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(16), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706157521}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706157521}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 16 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706157521}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706157521}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx-opo type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706157521}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 16 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706157521}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706157522}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-op type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(134)}} })","module":"lsp","target":"lsp","timestamp":1722706157940}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-o type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(135)}} })","module":"lsp","target":"lsp","timestamp":1722706158080}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(136)}} })","module":"lsp","target":"lsp","timestamp":1722706158200}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-p type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(137)}} })","module":"lsp","target":"lsp","timestamp":1722706158554}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(24)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(14), \"line\": Number(12)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706158568}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706158568}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 12, character: 14 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706158568}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706158568}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script hx-p type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706158568}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 12, character: 14 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706158568}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706158572}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-po type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(138)}} })","module":"lsp","target":"lsp","timestamp":1722706158733}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx-p type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(139)}} })","module":"lsp","target":"lsp","timestamp":1722706160987}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx- type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(140)}} })","module":"lsp","target":"lsp","timestamp":1722706161142}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script hx type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(141)}} })","module":"lsp","target":"lsp","timestamp":1722706161501}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script h type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(142)}} })","module":"lsp","target":"lsp","timestamp":1722706161653}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script  type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(143)}} })","module":"lsp","target":"lsp","timestamp":1722706161793}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(144)}} })","module":"lsp","target":"lsp","timestamp":1722706161926}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didSave\", params: Object {\"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706164474}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(25)), method: \"shutdown\", params: Null })","module":"lsp","target":"lsp","timestamp":1722706164474}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706164474}
{"file":"lsp/src/handle.rs","level":"WARN","line":172,"message":"unhandled request: Request { id: RequestId(I32(25)), method: \"shutdown\", params: Null }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706164474}
{"level":"INFO","message":"starting generic LSP server","target":"lsp","timestamp":1722706174440}
{"level":"INFO","message":"STARTING EXAMPLE MAIN LOOP","target":"lsp","timestamp":1722706174441}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didOpen\", params: Object {\"textDocument\": Object {\"languageId\": String(\"html\"), \"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\"), \"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(0)}} })","module":"lsp","target":"lsp","timestamp":1722706174441}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(1)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706177480}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177480}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177481}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177481}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177481}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 6 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177481}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177482}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(1)}} })","module":"lsp","target":"lsp","timestamp":1722706177561}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(2)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\" \"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(7), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706177575}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177575}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 7 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\" \") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177575}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177575}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div  id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177575}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 7 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177575}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177576}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(2)}} })","module":"lsp","target":"lsp","timestamp":1722706177814}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(3)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706177828}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177828}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177828}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177828}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div h id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177828}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 8 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177828}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177831}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(3)}} })","module":"lsp","target":"lsp","timestamp":1722706177884}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(4)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706177897}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177897}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177897}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177897}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div hx id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177897}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 9 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706177897}
{"file":"lsp/src/handle.rs","level":"ERROR","line":126,"message":"EMPTY RESULTS OF COMPLETION","module":"lsp::handle","target":"lsp::handle","timestamp":1722706177898}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(4)}} })","module":"lsp","target":"lsp","timestamp":1722706178125}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(5)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerCharacter\": String(\"-\"), \"triggerKind\": Number(2)}, \"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706178139}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706178139}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706178139}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706178139}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div hx- id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706178139}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 10 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706178139}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: TriggerCharacter, trigger_character: Some(\"-\") }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706178143}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(5)}} })","module":"lsp","target":"lsp","timestamp":1722706178788}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-ge id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(6)}} })","module":"lsp","target":"lsp","timestamp":1722706178877}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-get id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(7)}} })","module":"lsp","target":"lsp","timestamp":1722706179727}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-ge id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(8)}} })","module":"lsp","target":"lsp","timestamp":1722706181766}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(9)}} })","module":"lsp","target":"lsp","timestamp":1722706181941}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(10)}} })","module":"lsp","target":"lsp","timestamp":1722706182085}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(11)}} })","module":"lsp","target":"lsp","timestamp":1722706182929}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(6)), method: \"textDocument/completion\", params: Object {\"context\": Object {\"triggerKind\": Number(1)}, \"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706182944}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706182944}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }) }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706182944}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":108,"message":"get_position_from_lsp_completion","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706182944}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":110,"message":"get_position_from_lsp_completion: text <!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Vite + React + TS</title>\n</head>\n\n<body class=\"m-0 p-0\">\n  <div hx-s id=\"root\" class=\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\"></div>\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\n</body>\n\n</html>\n","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706182944}
{"file":"lsp/src/tree_sitter.rs","level":"ERROR","line":112,"message":"get_position_from_lsp_completion: pos Position { line: 11, character: 11 }","module":"lsp::tree_sitter","target":"lsp::tree_sitter","timestamp":1722706182944}
{"file":"lsp/src/handle.rs","level":"ERROR","line":131,"message":"handled result: Some(CompletionContext { trigger_kind: Invoked, trigger_character: None }): completion result: [HxCompletion { name: \"hx-boost\", desc: \"hx-boost\\nThe hx-boost attribute allows you to “boost” normal anchors and form tags to use AJAX instead. This has the nice fallback that, if the user does not have javascript enabled, the site will continue to work.\\n\\nFor anchor tags, clicking on the anchor will issue a GET request to the url specified in the href and will push the url so that a history entry is created. The target is the <body> tag, and the innerHTML swap strategy is used by default. All of these can be modified by using the appropriate attributes, except the click trigger.\\n\\nFor forms the request will be converted into a GET or POST, based on the method in the method attribute and will be triggered by a submit. Again, the target will be the body of the page, and the innerHTML swap will be used. The url will not be pushed, however, and no history entry will be created. (You can use the hx-push-url attribute if you want the url to be pushed.)\\n\\nHere is an example of some boosted links:\\n\\n<div hx-boost=\\\"true\\\">\\n  <a href=\\\"/page1\\\">Go To Page 1</a>\\n  <a href=\\\"/page2\\\">Go To Page 2</a>\\n</div>\\nThese links will issue an ajax GET request to the respective URLs and replace the body’s inner content with it.\\n\\nHere is an example of a boosted form:\\n\\n<form hx-boost=\\\"true\\\" action=\\\"/example\\\" method=\\\"post\\\">\\n    <input name=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"Enter email...\\\">\\n    <button>Submit</button>\\n</form>\\nThis form will issue an ajax POST to the given URL and replace the body’s inner content with it.\\n\\nNotes\\nhx-boost is inherited and can be placed on a parent element\\nOnly links that are to the same domain and that are not local anchors will be boosted\\nAll requests are done via AJAX, so keep that in mind when doing things like redirects\\nTo find out if the request results from a boosted anchor or form, look for HX-Boosted in the request header\\nSelectively disable boost on child elements with hx-boost=\\\"false\\\"\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-boost/)\\n\" }, HxCompletion { name: \"hx-delete\", desc: \"hx-delete\\n\\nThe hx-delete attribute will cause an element to issue a DELETE to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-delete=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Delete Your Account\\n</button>\\nThis example will cause the button to issue a DELETE to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-delete is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\nTo remove the element following a successful DELETE, return a 200 status code with an empty body; if the server responds with a 204, no swap takes place, documented here: Requests & Responses\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-delete/)\\n\" }, HxCompletion { name: \"hx-get\", desc: \"hx-get\\n\\nThe hx-get attribute will cause an element to issue a GET to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n  <div hx-get=\\\"/example\\\">Get Some HTML</div>\\nThis example will cause the div to issue a GET to /example and swap the returned HTML into the innerHTML of the div.\\n\\nNotes\\nhx-get is not inherited\\nBy default hx-get does not include any parameters. You can use the hx-params attribute to change this\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-get/)\\n\" }, HxCompletion { name: \"hx-include\", desc: \"hx-include\\n\\nThe hx-include attribute allows you to include additional element values in an AJAX request. The value of this attribute is a CSS query selector of the element or elements to include in the query.\\n\\nHere is an example that includes a separate input value:\\n\\n<div>\\n    <button hx-post=\\\"/register\\\" hx-include=\\\"[name='email']\\\">\\n        Register!\\n    </button>\\n    Enter email: <input name=\\\"email\\\" type=\\\"email\\\"/>\\n</div>\\nThis is a little contrived as you would typically enclose both of these elements in a form and submit the value automatically, but it demonstrates the concept.\\n\\nNote that if you include a non-input element, all input elements enclosed in that element will be included.\\n\\nNotes\\nhx-include is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-include/)\\n\\n\" }, HxCompletion { name: \"hx-patch\", desc: \"hx-patch\\n\\nThe hx-patch attribute will cause an element to issue a PATCH to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-patch=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Patch Your Account\\n</button>\\nThis example will cause the button to issue a PATCH to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-patch is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-patch/)\\n\" }, HxCompletion { name: \"hx-post\", desc: \"hx-post\\n\\nThe hx-post attribute will cause an element to issue a POST to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-post=\\\"/account/enable\\\" hx-target=\\\"body\\\">\\n  Enable Your Account\\n</button>\\nThis example will cause the button to issue a POST to /account/enable and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-post is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-post/)\\n\" }, HxCompletion { name: \"hx-put\", desc: \"hx-put\\n\\nThe hx-put attribute will cause an element to issue a PUT to the specified URL and swap the HTML into the DOM using a swap strategy:\\n\\n<button hx-put=\\\"/account\\\" hx-target=\\\"body\\\">\\n  Put Money In Your Account\\n</button>\\nThis example will cause the button to issue a PUT to /account and swap the returned HTML into the innerHTML of the body.\\n\\nNotes\\nhx-put is not inherited\\nYou can control the target of the swap using the hx-target attribute\\nYou can control the swap strategy by using the hx-swap attribute\\nYou can control what event triggers the request with the hx-trigger attribute\\nYou can control the data submitted with the request in various ways, documented here: Parameters\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-put/)\\n\" }, HxCompletion { name: \"hx-swap\", desc: \"hx-swap\\n\\nThe hx-swap attribute allows you to specify how the response will be swapped in relative to the target of an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\ninnerHTML - The default, replace the inner html of the target element\\nouterHTML - Replace the entire target element with the response\\nbeforebegin - Insert the response before the target element\\nafterbegin - Insert the response before the first child of the target element\\nbeforeend - Insert the response after the last child of the target element\\nafterend - Insert the response after the target element\\ndelete - Deletes the target element regardless of the response\\nnone- Does not append content from response (out of band items will still be processed).\\nThese options are based on standard DOM naming and the Element.insertAdjacentHTML specification.\\n\\nSo in this code:\\n\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"afterend\\\">Get Some HTML & Append It</div>\\nThe div will issue a request to /example and append the returned content after the div\\n\\nModifiers\\nThe hx-swap attributes supports modifiers for changing the behavior of the swap. They are outlined below.\\n\\nTransition: transition\\nIf you want to use the new View Transitions API when a swap occurs, you can use the transition:true option for your swap. You can also enable this feature globally by setting the htmx.config.globalViewTransitions config setting to true.\\n\\nTiming: swap & settle\\nYou can modify the amount of time that htmx will wait after receiving a response to swap the content by including a swap modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML swap:1s\\\">Get Some HTML & Append It</div>\\nSimilarly, you can modify the time between the swap and the settle logic by including a settle modifier:\\n\\n  <!-- this will wait 1s before doing the swap after it is received -->\\n  <div hx-get=\\\"/example\\\" hx-swap=\\\"innerHTML settle:1s\\\">Get Some HTML & Append It</div>\\nThese attributes can be used to synchronize htmx with the timing of CSS transition effects.\\n\\nScrolling: scroll & show\\nYou can also change the scrolling behavior of the target element by using the scroll and show modifiers, both of which take the values top and bottom:\\n\\n  <!-- this fixed-height div will scroll to the bottom of the div after content is appended -->\\n  <div style=\\\"height:200px; overflow: scroll\\\"\\n       hx-get=\\\"/example\\\"\\n       hx-swap=\\\"beforeend scroll:bottom\\\">\\n     Get Some HTML & Append It & Scroll To Bottom\\n  </div>\\n  <!-- this will get some content and add it to #another-div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:top\\\"\\n       hx-target=\\\"#another-div\\\">\\n    Get Some Content\\n  </div>\\nIf you wish to target a different element for scrolling or showing, you may place a CSS selector after the scroll: or show:, followed by :top or :bottom:\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the top of #another-div is visible in the\\n       viewport -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:#another-div:top\\\">\\n    Get Some Content\\n  </div>\\nYou may also use window:top and window:bottom to scroll to the top and bottom of the current window.\\n\\n  <!-- this will get some content and swap it into the current div, then ensure that the viewport is scrolled to the\\n       very top -->\\n  <div hx-get=\\\"/example\\\"\\n       hx-swap=\\\"innerHTML show:window:top\\\">\\n    Get Some Content\\n  </div>\\nFocus scroll\\nhtmx preserves focus between requests for inputs that have a defined id attribute. By default htmx prevents auto-scrolling to focused inputs between requests which can be unwanted behavior on longer requests when the user has already scrolled away. To enable focus scroll you can use focus-scroll:true.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:true\\\"/>\\nAlternatively, if you want the page to automatically scroll to the focused element after each request you can change the htmx global configuration value htmx.config.defaultFocusScroll to true. Then disable it for specific requests using focus-scroll:false.\\n\\n  <input id=\\\"name\\\" hx-get=\\\"/validation\\\"\\n       hx-swap=\\\"outerHTML focus-scroll:false\\\"/>\\nNotes\\nhx-swap is inherited and can be placed on a parent element\\nThe default value of this attribute is innerHTML\\nDue to DOM limitations, it’s not possible to use the outerHTML method on the <body> element. htmx will change outerHTML on <body> to use innerHTML.\\nThe default swap delay is 0ms\\nThe default settle delay is 20ms\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap/)\\n\" }, HxCompletion { name: \"hx-target\", desc: \"hx-target\\n\\nThe hx-target attribute allows you to target a different element for swapping than the one issuing the AJAX request. The value of this attribute can be:\\n\\nA CSS query selector of the element to target.\\nthis which indicates that the element that the hx-target attribute is on is the target.\\nclosest <CSS selector> which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr will target the closest table row to the element).\\nfind <CSS selector> which will find the first child descendant element that matches the given CSS selector.\\nnext <CSS selector> which will scan the DOM forward for the first element that matches the given CSS selector. (e.g. next .error will target the closest following sibling element with error class)\\nprevious <CSS selector> which will scan the DOM backwards for the first element that matches the given CSS selector. (e.g previous .error will target the closest previous sibling with error class)\\nHere is an example that targets a div:\\n\\n<div>\\n    <div id=\\\"response-div\\\"></div>\\n    <button hx-post=\\\"/register\\\" hx-target=\\\"#response-div\\\" hx-swap=\\\"beforeend\\\">\\n        Register!\\n    </button>\\n</div>\\nThe response from the /register url will be appended to the div with the id response-div.\\n\\nThis example uses hx-target=\\\"this\\\" to make a link that updates itself when clicked:\\n\\n<a hx-post=\\\"/new-link\\\" hx-target=\\\"this\\\" hx-swap=\\\"outerHTML\\\">New link</a>\\nNotes\\nhx-target is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-target/)\\n\" }, HxCompletion { name: \"hx-trigger\", desc: \"hx-trigger\\n\\nThe hx-trigger attribute allows you to specify what triggers an AJAX request. A trigger value can be one of the following:\\n\\nAn event name (e.g. “click” or “my-custom-event”) followed by an event filter and a set of event modifiers\\nA polling definition of the form every <timing declaration>\\nA comma-separated list of such events\\nStandard Events\\nA standard event, such as click can be specified as the trigger like so:\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click\\\">Click Me</div>\\nStandard Event Filters\\nEvents can be filtered by enclosing a boolean javascript expression in square brackets after the event name. If this expression evaluates to true the event will be triggered, otherwise it will be ignored.\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey]\\\">Control Click Me</div>\\nThis event will trigger if a click event is triggered with the event.ctrlKey property set to true.\\n\\nConditions can also refer to global functions or state\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[checkGlobalState()]\\\">Control Click Me</div>\\nAnd can also be combined using the standard javascript syntax\\n\\n<div hx-get=\\\"/clicked\\\" hx-trigger=\\\"click[ctrlKey&&shiftKey]\\\">Control-Shift Click Me</div>\\nNote that all symbols used in the expression will be resolved first against the triggering event, and then next against the global namespace, so myEvent[foo] will first look for a property named foo on the event, then look for a global symbol with the name foo\\n\\nStandard Event Modifiers\\nStandard events can also have modifiers that change how they behave. The modifiers are:\\n\\nonce - the event will only trigger once (e.g. the first click)\\nchanged - the event will only change if the value of the element has changed. Please pay attention change is the name of the event and changed is the name of the modifier.\\ndelay:<timing declaration> - a delay will occur before an event triggers a request. If the event is seen again it will reset the delay.\\nthrottle:<timing declaration> - a throttle will occur after an event triggers a request. If the event is seen again before the delay completes, it is ignored, the element will trigger at the end of the delay.\\nfrom:<Extended CSS selector> - allows the event that triggers a request to come from another element in the document (e.g. listening to a key event on the body, to support hot keys)\\nA standard CSS selector resolves to all elements matching that selector. Thus, from:input would listen on every input on the page.\\nThe extended CSS selector here allows for the following non-standard CSS values:\\ndocument - listen for events on the document\\nwindow - listen for events on the window\\nclosest <CSS selector> - finds the closest ancestor element or itself, matching the given css selector\\nfind <CSS selector> - finds the closest child matching the given css selector\\ntarget:<CSS selector> - allows you to filter via a CSS selector on the target of the event. This can be useful when you want to listen for triggers from elements that might not be in the DOM at the point of initialization, by, for example, listening on the body, but with a target filter for a child element\\nconsume - if this option is included the event will not trigger any other htmx requests on parents (or on elements listening on parents)\\nqueue:<queue option> - determines how events are queued if an event occurs while a request for another event is in flight. Options are:\\nfirst - queue the first event\\nlast - queue the last event (default)\\nall - queue all events (issue a request for each event)\\nnone - do not queue new events\\nHere is an example of a search box that searches on keyup, but only if the search value has changed and the user hasn’t typed anything new for 1 second:\\n\\n<input name=\\\"q\\\"\\n       hx-get=\\\"/search\\\" hx-trigger=\\\"keyup changed delay:1s\\\"\\n       hx-target=\\\"#search-results\\\"/>\\nThe response from the /search url will be appended to the div with the id search-results.\\n\\nNon-standard Events\\nThere are some additional non-standard events that htmx supports:\\n\\nload - triggered on load (useful for lazy-loading something)\\nrevealed - triggered when an element is scrolled into the viewport (also useful for lazy-loading). If you are using overflow in css like overflow-y: scroll you should use intersect once instead of revealed.\\nintersect - fires once when an element first intersects the viewport. This supports two additional options:\\nroot:<selector> - a CSS selector of the root element for intersection\\nthreshold:<float> - a floating point number between 0.0 and 1.0, indicating what amount of intersection to fire the event on\\nTriggering via the HX-Trigger header\\nIf you’re trying to fire an event from HX-Trigger response header, you will likely want to use the from:body modifier. E.g. if you send a header like this HX-Trigger: my-custom-event with a response, an element would likely need to look like this:\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"my-custom-event from:body\\\">\\n    Triggered by HX-Trigger header...\\n  </div>\\nin order to fire.\\n\\nThis is because the header will likely trigger the event in a different DOM hierarchy than the element that you wish to be triggered. For a similar reason, you will often listen for hot keys from the body.\\n\\nPolling\\nBy using the syntax every <timing declaration> you can have an element poll periodically:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s\\\">\\n  Nothing Yet!\\n</div>\\nThis example will issue a GET to the /latest_updates URL every second and swap the results into the innerHTML of this div.\\n\\nIf you want to add a filter to polling, it should be added after the poll declaration:\\n\\n<div hx-get=\\\"/latest_updates\\\" hx-trigger=\\\"every 1s [someConditional]\\\">\\n  Nothing Yet!\\n</div>\\nMultiple Triggers\\nMultiple triggers can be provided, separated by commas. Each trigger gets its own options.\\n\\n  <div hx-get=\\\"/news\\\" hx-trigger=\\\"load, click delay:1s\\\"></div>\\nThis example will load /news immediately on page load, and then again with a delay of one second after each click.\\n\\nVia JavaScript\\nThe AJAX request can be triggered via JavaScript htmx.trigger(), too.\\n\\nNotes\\nhx-trigger is not inherited\\nhx-trigger can be used without an AJAX request, in which case it will only fire the htmx:trigger event\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-trigger/)\\n\" }, HxCompletion { name: \"hx-vals\", desc: \"hx-vals\\n\\nThe hx-vals attribute allows you to add to the parameters that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-vals to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='{\\\"myVal\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Value in the Request</div>\\n\\n  <div hx-get=\\\"/example\\\" hx-vals='js:{myVal: calculateValue()}'>Get Some HTML, Including a Dynamic Value from Javascript in the Request</div>\\nWhen using evaluated code you can access the event object. This example includes the value of the last typed key within the input.\\n\\n  <div hx-get=\\\"/example\\\" hx-trigger=\\\"keyup\\\" hx-vals='js:{lastKey: event.key}'>\\n    <input type=\\\"text\\\" />\\n  </div>\\nSecurity Considerations\\nBy default, the value of hx-vals must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\nNotes\\nhx-vals is inherited and can be placed on a parent element.\\nA child declaration of a variable overrides a parent declaration.\\nInput values with the same name will be overridden by variable declarations.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-vals/)\\n\" }, HxCompletion { name: \"hx-push-url\", desc: \"hx-push-url\\n\\nThe hx-push-url attribute allows you to push a URL into the browser location history. This creates a new history entry, allowing navigation with the browser’s back and forward buttons. htmx snapshots the current DOM and saves it into its history cache, and restores from this cache on navigation.\\n\\nThe possible values of this attribute are:\\n\\n    true, which pushes the fetched URL into history.\\n    false, which disables pushing the fetched URL if it would otherwise be pushed due to inheritance or hx-boost.\\n    A URL to be pushed into the location bar. This may be relative or absolute, as per history.pushState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and push the URL `/account’ into the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-push-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will push the URL `/account/home’ into the location history.\\nNotes\\n\\n    hx-push-url is inherited and can be placed on a parent element\\n    The HX-Push-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-push-url/)\\n\" }, HxCompletion { name: \"hx-select\", desc: \"hx-select\\n\\nThe hx-select attribute allows you to select the content you want swapped from a response. The value of this attribute is a CSS query selector of the element or elements to select from the response.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n    <button hx-get=\\\"/info\\\" hx-select=\\\"#info-details\\\" hx-swap=\\\"outerHTML\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nSo this button will issue a GET to /info and then select the element with the id info-detail, which will replace the entire button in the DOM.\\nNotes\\n\\n    hx-select is inherited and can be placed on a parent element\\n\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select/)\\n\" }, HxCompletion { name: \"hx-ext\", desc: \"reference an extension\\n\\nTip: To use multiple extensions on one element, seperate them with a comma:\\n  <button hx-post=\\\"/example\\\" hx-ext=\\\"debug, json-enc\\\">This Button Uses Two Extensions</button>\\n\\nby default, extensions are applied to the DOM node where it is invoked, along with all child elements inside of that parent node. If you need to disable an extension somewhere within the DOM tree, you can use the ignore: keyword to stop it from being used.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-ext/)\\n\" }, HxCompletion { name: \"hx-on\", desc: \"The hx-on attribute allows you to embed scripts inline to respond to events directly on an element; similar to the onevent properties found in HTML, such as onClick.\\n\\nhx-on improves upon onevent by enabling the handling of any event for enhanced Locality of Behaviour (LoB). This also enables you to handle any htmx event.\\n\\nThere are two forms of this attribute, one in which you specify the event as part of the attribute name after a colon (hx-on:click, for example), and a deprecated form that uses the hx-on attribute directly. The latter should only be used if IE11 support is required.\\nhx-on:* (recommended)\\n\\nThe event name follows a colon : in the attribute, and the attribute value is the script to be executed:\\n\\n<div hx-on:click=\\\"alert('Clicked!')\\\">Click</div>\\n\\nAll htmx events can be captured, too! Make sure to use the kebab-case event name, because DOM attributes do not preserve casing. For instance, hx-on::beforeRequest will not work: use hx-on::before-request instead.\\n\\nTo make writing these a little easier, you can use the shorthand double-colon hx-on:: for htmx events, and omit the “htmx” part:\\n\\n<!-- These two are equivalent -->\\n<button hx-get=\\\"/info\\\" hx-on:htmx:before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\n<button hx-get=\\\"/info\\\" hx-on::before-request=\\\"alert('Making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nAdding multiple handlers is easy, you just specify additional attributes:\\n\\n<button hx-get=\\\"/info\\\"\\n        hx-on::before-request=\\\"alert('Making a request!')\\\"\\n        hx-on::after-request=\\\"alert('Done making a request!')\\\">\\n    Get Info!\\n</button>\\n\\nSymbols\\n\\nLike onevent, two symbols are made available to event handler scripts:\\n\\n    this - The element on which the hx-on attribute is defined\\n    event - The event that triggered the handler\\n\\nNotes\\n\\n    hx-on is not inherited, however due to event bubbling, hx-on attributes on parent elements will typically be triggered by events on child elements\\n    hx-on:* and hx-on cannot be used together on the same element; if hx-on:* is present, the value of an hx-on attribute on the same element will be ignored. The two forms can be mixed in the same document, however.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-on/)\\n\" }, HxCompletion { name: \"hx-select-oob\", desc: \"The hx-select-oob attribute allows you to select content from a response to be swapped in via an out-of-band swap.\\nThe value of this attribute is comma separated list of elements to be swapped out of band. This attribute is almost always paired with hx-select.\\n\\nHere is an example that selects a subset of the response content:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nThis button will issue a GET to /info and then select the element with the id info-details, which will replace the entire button in the DOM, and, in addition, pick out an element with the id alert in the response and swap it in for div in the DOM with the same ID.\\n\\nEach value in the comma separated list of values can specify any valid hx-swap strategy by separating the selector and the swap strategy with a :.\\n\\nFor example, to prepend the alert content instead of replacing it:\\n\\n<div>\\n   <div id=\\\"alert\\\"></div>\\n    <button hx-get=\\\"/info\\\"\\n            hx-select=\\\"#info-details\\\"\\n            hx-swap=\\\"outerHTML\\\"\\n            hx-select-oob=\\\"#alert:afterbegin\\\">\\n        Get Info!\\n    </button>\\n</div>\\n\\nNotes\\n\\n    hx-select-oob is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-select-oob/)\\n\" }, HxCompletion { name: \"hx-swap-oob\", desc: \"The hx-swap-oob attribute allows you to specify that some content in a response should be swapped into the DOM somewhere other than the target, that is “Out of Band”. This allows you to piggy back updates to other element updates on a response.\\n\\nConsider the following response HTML:\\n\\n<div>\\n ...\\n</div>\\n<div id=\\\"alerts\\\" hx-swap-oob=\\\"true\\\">\\n    Saved!\\n</div>\\n\\nThe first div will be swapped into the target the usual manner. The second div, however, will be swapped in as a replacement for the element with the id alerts, and will not end up in the target.\\n\\nThe value of the hx-swap-oob can be:\\n\\n    true\\n    any valid hx-swap value\\n    any valid hx-swap value, followed by a colon, followed by a CSS selector\\n\\nIf the value is true or outerHTML (which are equivalent) the element will be swapped inline.\\n\\nIf a swap value is given, that swap strategy will be used.\\n\\nIf a selector is given, all elements matched by that selector will be swapped. If not, the element with an ID matching the new content will be swapped.\\nNotes\\n\\n    hx-swap-oob is not inherited\\n    Out of band elements must be in the top level of the response, and not children of the top level elements.\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-swap-oob/)\\n\" }, HxCompletion { name: \"hx-confirm\", desc: \"The hx-confirm attribute allows you to confirm an action before issuing a request. This can be useful in cases where the action is destructive and you want to ensure that the user really wants to do it.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-confirm=\\\"Are you sure you wish to delete your account?\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-confirm is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-confirm/)\\n\\n\" }, HxCompletion { name: \"hx-disable\", desc: \"The hx-disable attribute will disable htmx processing for a given element and all its children. This can be useful as a backup for HTML escaping, when you include user generated content in your site, and you want to prevent malicious scripting attacks.\\n\\nThe value of the tag is ignored, and it cannot be reversed by any content beneath it.\\nNotes\\n\\n    hx-disable is inherited\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-disable/)\\n\\n\" }, HxCompletion { name: \"hx-encoding\", desc: \"The hx-encoding attribute allows you to switch the request encoding from the usual application/x-www-form-urlencoded encoding to multipart/form-data, usually to support file uploads in an ajax request.\\n\\nThe value of this attribute should be multipart/form-data.\\n\\nThe hx-encoding tag may be placed on parent elements.\\nNotes\\n\\n    hx-encoding is inherited and can be placed on a parent element\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-encoding/)\\n\\n\" }, HxCompletion { name: \"hx-headers\", desc: \"The hx-headers attribute allows you to add to the headers that will be submitted with an AJAX request.\\n\\nBy default, the value of this attribute is a list of name-expression values in JSON (JavaScript Object Notation) format.\\n\\nIf you wish for hx-headers to evaluate the values given, you can prefix the values with javascript: or js:.\\n\\n  <div hx-get=\\\"/example\\\" hx-headers='{\\\"myHeader\\\": \\\"My Value\\\"}'>Get Some HTML, Including A Custom Header in the Request</div>\\n\\nSecurity Considerations\\n\\n    By default, the value of hx-headers must be valid JSON. It is not dynamically computed. If you use the javascript: prefix, be aware that you are introducing security considerations, especially when dealing with user input such as query strings or user-generated content, which could introduce a Cross-Site Scripting (XSS) vulnerability.\\n\\nNotes\\n\\n    hx-headers is inherited and can be placed on a parent element.\\n    A child declaration of a header overrides a parent declaration.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-headers/)\\n\" }, HxCompletion { name: \"hx-history\", desc: \"Set the hx-history attribute to false on any element in the current document, or any html fragment loaded into the current document by htmx, to prevent sensitive data being saved to the localStorage cache when htmx takes a snapshot of the page state.\\n\\nHistory navigation will work as expected, but on restoration the URL will be requested from the server instead of the history cache.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div hx-history=\\\"false\\\">\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history=\\\"false\\\" can be present anywhere in the document to embargo the current page state from the history cache (i.e. even outside the element specified for the history snapshot hx-history-elt).\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history/)\\n\" }, HxCompletion { name: \"hx-history-elt\", desc: \"The hx-history-elt attribute allows you to specify the element that will be used to snapshot and restore page state during navigation. By default, the body tag is used. This is typically good enough for most setups, but you may want to narrow it down to a child element. Just make sure that the element is always visible in your application, or htmx will not be able to restore history navigation properly.\\n\\nHere is an example:\\n\\n<html>\\n  <body>\\n    <div id=\\\"content\\\" hx-history-elt>\\n     ...\\n    </div>\\n  </body>\\n</html>\\n\\nNotes\\n\\n    hx-history-elt is not inherited\\n    In most cases we don’t recommend narrowing the history snapshot\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-history-elt/)\\n\" }, HxCompletion { name: \"hx-indicator\", desc: \"The hx-indicator attribute allows you to specify the element that will have the htmx-request class added to it for the duration of the request. This can be used to show spinners or progress indicators while the request is in flight.\\n\\nThe value of this attribute is a CSS query selector of the element or elements to apply the class to, or the keyword closest, followed by a CSS selector, which will find the closest ancestor element or itself, that matches the given CSS selector (e.g. closest tr);\\n\\nHere is an example with a spinner adjacent to the button:\\n\\n<div>\\n    <button hx-post=\\\"/example\\\" hx-indicator=\\\"#spinner\\\">\\n        Post It!\\n    </button>\\n    <img  id=\\\"spinner\\\" class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</div>\\n\\nWhen a request is in flight, this will cause the htmx-request class to be added to the #spinner image. The image also has the htmx-indicator class on it, which defines an opacity transition that will show the spinner:\\n\\n    .htmx-indicator{\\n        opacity:0;\\n        transition: opacity 500ms ease-in;\\n    }\\n    .htmx-request .htmx-indicator{\\n        opacity:1\\n    }\\n    .htmx-request.htmx-indicator{\\n        opacity:1\\n    }\\n\\nIf you would prefer a different effect for showing the spinner you could define and use your own indicator CSS. Here is an example that uses display rather than opacity (Note that we use my-indicator instead of htmx-indicator):\\n\\n    .my-indicator{\\n        display:none;\\n    }\\n    .htmx-request .my-indicator{\\n        display:inline;\\n    }\\n    .htmx-request.my-indicator{\\n        display:inline;\\n    }\\n\\nNote that the target of the hx-indicator selector need not be the exact element that you want to show: it can be any element in the parent hierarchy of the indicator.\\n\\nFinally, note that the htmx-request class by default is added to the element causing the request, so you can place an indicator inside of that element and not need to explicitly call it out with the hx-indicator attribute:\\n\\n<button hx-post=\\\"/example\\\">\\n    Post It!\\n   <img  class=\\\"htmx-indicator\\\" src=\\\"/img/bars.svg\\\"/>\\n</button>\\n\\nNotes\\n\\n    hx-indicator is inherited and can be placed on a parent element\\n    In the absence of an explicit indicator, the htmx-request class will be added to the element triggering the request\\n    If you want to use your own CSS but still use htmx-indicator as class name, then you need to disable includeIndicatorStyles. See Configuring htmx. The easiest way is to add this the <head> of your HTML:\\n\\n<meta name=\\\"htmx-config\\\" content='{\\\"includeIndicatorStyles\\\": false}'>\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-indicator/)\\n\" }, HxCompletion { name: \"hx-params\", desc: \"The hx-params attribute allows you to filter the parameters that will be submitted with an AJAX request.\\n\\nThe possible values of this attribute are:\\n\\n    * - Include all parameters (default)\\n    none - Include no parameters\\n    not <param-list> - Include all except the comma separated list of parameter names\\n    <param-list> - Include all the comma separated list of parameter names\\n\\n  <div hx-get=\\\"/example\\\" hx-params=\\\"*\\\">Get Some HTML, Including Params</div>\\n\\nThis div will include all the parameters that a POST would, but they will be URL encoded and included in the URL, as per usual with a GET.\\nNotes\\n\\n    hx-params is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-params/)\\n\" }, HxCompletion { name: \"hx-preserve\", desc: \"The hx-preserve attribute allows you to keep an element unchanged during HTML replacement. Elements with hx-preserve set are preserved by id when htmx updates any ancestor element. You must set an unchanging id on elements for hx-preserve to work. The response requires an element with the same id, but its type and other attributes are ignored.\\n\\nNote that some elements cannot unfortunately be preserved properly, such as <input type=\\\"text\\\"> (focus and caret position are lost), iframes or certain types of videos. To tackle some of these cases we recommend the morphdom extension, which does a more elaborate DOM reconciliation.\\nNotes\\n\\n    hx-preserve is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-preserve/)\\n\" }, HxCompletion { name: \"hx-prompt\", desc: \"The hx-prompt attribute allows you to show a prompt before issuing a request. The value of the prompt will be included in the request in the HX-Prompt header.\\n\\nHere is an example:\\n\\n<button hx-delete=\\\"/account\\\" hx-prompt=\\\"Enter your account name to confirm deletion\\\">\\n  Delete My Account\\n</button>\\n\\nNotes\\n\\n    hx-prompt is inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-prompt/)\\n\" }, HxCompletion { name: \"hx-replace-url\", desc: \"The hx-replace-url attribute allows you to replace the current url of the browser location history.\\n\\nThe possible values of this attribute are:\\n\\n    true, which replaces the fetched URL in the browser navigation bar.\\n    false, which disables replacing the fetched URL if it would otherwise be replaced due to inheritance.\\n    A URL to be replaced into the location bar. This may be relative or absolute, as per history.replaceState().\\n\\nHere is an example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"true\\\">\\n  Go to My Account\\n</div>\\n\\nThis will cause htmx to snapshot the current DOM to localStorage and replace the URL `/account’ in the browser location bar.\\n\\nAnother example:\\n\\n<div hx-get=\\\"/account\\\" hx-replace-url=\\\"/account/home\\\">\\n  Go to My Account\\n</div>\\n\\nThis will replace the URL `/account/home’ in the browser location bar.\\nNotes\\n\\n    hx-replace-url is inherited and can be placed on a parent element\\n    The HX-Replace-Url response header has similar behavior and can override this attribute.\\n    The hx-history-elt attribute allows changing which element is saved in the history cache.\\n    The hx-push-url attribute is a similar and more commonly used attribute, which creates a new history entry rather than replacing the current one.\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-replace-url/)\\n\" }, HxCompletion { name: \"hx-request\", desc: \"The hx-request attribute allows you to configure various aspects of the request via the following attributes:\\n\\n    timeout - the timeout for the request, in milliseconds\\n    credentials - if the request will send credentials\\n    noHeaders - strips all headers from the request\\n\\nThese attributes are set using a JSON-like syntax:\\n\\n<div ... hx-request='\\\\\\\"timeout\\\\\\\":100'>\\n  ...\\n</div>\\n\\nYou may make the values dynamically evaluated by adding the javascript: or js: prefix:\\n\\n<div ... hx-request='js: timeout:getTimeoutSetting() '>\\n  ...\\n</div>\\n\\nNotes\\n\\n    hx-request is merge-inherited and can be placed on a parent element\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-request/)\\n\" }, HxCompletion { name: \"hx-sync\", desc: \"The hx-sync attribute allows you to synchronize AJAX requests between multiple elements.\\n\\nThe hx-sync attribute consists of a CSS selector to indicate the element to synchronize on, followed optionally by a colon and then by an optional syncing strategy. The available strategies are:\\n\\n    drop - drop (ignore) this request if an existing request is in flight (the default)\\n    abort - drop (ignore) this request if an existing request is in flight, and, if that is not the case, abort this request if another request occurs while it is still in flight\\n    replace - abort the current request, if any, and replace it with this request\\n    queue - place this request in the request queue associated with the given element\\n\\nThe queue modifier can take an additional argument indicating exactly how to queue:\\n\\n    queue first - queue the first request to show up while a request is in flight\\n    queue last - queue the last request to show up while a request is in flight\\n    queue all - queue all requests that show up while a request is in flight\\n\\nNotes\\n\\n    hx-sync is inherited and can be placed on a parent element\\n\\nThis example resolves a race condition between a form’s submit request and an individual input’s validation request. Normally, without using hx-sync, filling out the input and immediately submitting the form triggers two parallel requests to /validate and /store. Using hx-sync=\\\"closest form:abort\\\" on the input will watch for requests on the form and abort the input’s request if a form request is present or starts while the input request is in flight.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:abort\\\">\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nIf you’d rather prioritize the validation request over the submit request, you can use the drop strategy. This example will prioritize the validation request over the submit request so that if a validation request is in flight, the form cannot be submitted.\\n\\n<form hx-post=\\\"/store\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\"\\n        hx-post=\\\"/validate\\\"\\n        hx-trigger=\\\"change\\\"\\n        hx-sync=\\\"closest form:drop\\\"\\n    >\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen dealing with forms that contain many inputs, you can prioritize the submit request over all input validation requests using the hx-sync replace strategy on the form tag. This will cancel any in-flight validation requests and issue only the hx-post=\\\"/store\\\" request. If you’d rather abort the submit request and prioritize any existing validation requests you can use the hx-sync=\\\"this:abort\\\" strategy on the form tag.\\n\\n<form hx-post=\\\"/store\\\" hx-sync=\\\"this:replace\\\">\\n    <input id=\\\"title\\\" name=\\\"title\\\" type=\\\"text\\\" hx-post=\\\"/validate\\\" hx-trigger=\\\"change\\\" />\\n    <button type=\\\"submit\\\">Submit</button>\\n</form>\\n\\nWhen implementing active search functionality the hx-trigger attribute’s delay modifier can be used to debounce the user’s input and avoid making multiple requests while the user types. However, once a request is made, if the user begins typing again a new request will begin even if the previous one has not finished processing. This example will cancel any in-flight requests and use only the last request. In cases where the search input is contained within the target, then using hx-sync like this also helps reduce the chances that the input will be replaced while the user is still typing.\\n\\n<input type=\\\"search\\\"\\n    hx-get=\\\"/search\\\"\\n    hx-trigger=\\\"keyup changed delay:500ms, search\\\"\\n    hx-target=\\\"#search-results\\\"\\n    hx-sync=\\\"this:replace\\\">\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-sync/)\\n\" }, HxCompletion { name: \"hx-validate\", desc: \"The hx-validate attribute will cause an element to validate itself by way of the HTML5 Validation API before it submits a request.\\n\\nForm elements do this by default, but other elements do not.\\nNotes\\n\\n    hx-validate is not inherited\\n\\n\\n[HTMX Reference](https://htmx.org/attributes/hx-validate/)\\n\" }]","module":"lsp::handle","target":"lsp::handle","timestamp":1722706182947}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(12)}} })","module":"lsp","target":"lsp","timestamp":1722706183219}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(18)}} })","module":"lsp","target":"lsp","timestamp":1722706196583}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-swap-oo id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(20)}} })","module":"lsp","target":"lsp","timestamp":1722706196583}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-swap-oob id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(19)}} })","module":"lsp","target":"lsp","timestamp":1722706196584}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-swap-o id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(21)}} })","module":"lsp","target":"lsp","timestamp":1722706196888}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-swap- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(22)}} })","module":"lsp","target":"lsp","timestamp":1722706196915}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-swap id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(23)}} })","module":"lsp","target":"lsp","timestamp":1722706196938}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-swa id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(24)}} })","module":"lsp","target":"lsp","timestamp":1722706196958}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(25)}} })","module":"lsp","target":"lsp","timestamp":1722706196978}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(26)}} })","module":"lsp","target":"lsp","timestamp":1722706196998}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(27)}} })","module":"lsp","target":"lsp","timestamp":1722706197020}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(28)}} })","module":"lsp","target":"lsp","timestamp":1722706197207}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(29)}} })","module":"lsp","target":"lsp","timestamp":1722706197385}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(30)}} })","module":"lsp","target":"lsp","timestamp":1722706197528}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(31)}} })","module":"lsp","target":"lsp","timestamp":1722706197693}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(32)}} })","module":"lsp","target":"lsp","timestamp":1722706197827}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(33)}} })","module":"lsp","target":"lsp","timestamp":1722706197964}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(34)}} })","module":"lsp","target":"lsp","timestamp":1722706198306}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didSave\", params: Object {\"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706200502}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(7)), method: \"shutdown\", params: Null })","module":"lsp","target":"lsp","timestamp":1722706200502}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706200502}
{"file":"lsp/src/handle.rs","level":"WARN","line":172,"message":"unhandled request: Request { id: RequestId(I32(7)), method: \"shutdown\", params: Null }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706200502}
{"level":"INFO","message":"starting generic LSP server","target":"lsp","timestamp":1722706371988}
{"level":"INFO","message":"STARTING EXAMPLE MAIN LOOP","target":"lsp","timestamp":1722706372422}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didOpen\", params: Object {\"textDocument\": Object {\"languageId\": String(\"html\"), \"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\"), \"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(1)}} })","module":"lsp","target":"lsp","timestamp":1722706372422}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didOpen\", params: Object {\"textDocument\": Object {\"languageId\": String(\"html\"), \"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\"), \"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(1)}} })","module":"lsp","target":"lsp","timestamp":1722706372422}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"workspace/didChangeConfiguration\", params: Object {\"settings\": Null} })","module":"lsp","target":"lsp","timestamp":1722706372422}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(26)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706382137}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706382137}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706382137}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706382137}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(2)}} })","module":"lsp","target":"lsp","timestamp":1722706382203}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div xh id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(4)}} })","module":"lsp","target":"lsp","timestamp":1722706382552}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(31)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706382552}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706382552}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706382552}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706382552}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div x id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(5)}} })","module":"lsp","target":"lsp","timestamp":1722706383200}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(31)} })","module":"lsp","target":"lsp","timestamp":1722706383200}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(35)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706383200}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706383200}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706383200}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706383200}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(6)}} })","module":"lsp","target":"lsp","timestamp":1722706383369}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(7)}} })","module":"lsp","target":"lsp","timestamp":1722706383611}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(35)} })","module":"lsp","target":"lsp","timestamp":1722706383611}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(41)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706383611}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706383611}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706383611}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706383611}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(8)}} })","module":"lsp","target":"lsp","timestamp":1722706383680}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(41)} })","module":"lsp","target":"lsp","timestamp":1722706383681}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(44)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706383681}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706383681}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706383681}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706383681}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(9)}} })","module":"lsp","target":"lsp","timestamp":1722706384218}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(44)} })","module":"lsp","target":"lsp","timestamp":1722706384218}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(47)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706384218}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706384218}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706384218}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706384218}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(10)}} })","module":"lsp","target":"lsp","timestamp":1722706385057}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(47)} })","module":"lsp","target":"lsp","timestamp":1722706385057}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(52)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706385057}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706385057}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706385057}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706385057}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(11)}} })","module":"lsp","target":"lsp","timestamp":1722706386082}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(52)} })","module":"lsp","target":"lsp","timestamp":1722706386083}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(56)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706386084}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706386084}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706386084}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706386084}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-k id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(12)}} })","module":"lsp","target":"lsp","timestamp":1722706387458}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(56)} })","module":"lsp","target":"lsp","timestamp":1722706387458}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(59)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706387458}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706387458}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706387458}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706387458}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(13)}} })","module":"lsp","target":"lsp","timestamp":1722706388119}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(59)} })","module":"lsp","target":"lsp","timestamp":1722706388119}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(64)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706388119}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706388119}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706388119}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706388119}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(14)}} })","module":"lsp","target":"lsp","timestamp":1722706389069}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(64)} })","module":"lsp","target":"lsp","timestamp":1722706389070}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(69)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706389070}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706389070}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706389070}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706389070}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(15)}} })","module":"lsp","target":"lsp","timestamp":1722706389245}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(69)} })","module":"lsp","target":"lsp","timestamp":1722706389245}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(73)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706389246}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706389246}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706389246}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706389246}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(16)}} })","module":"lsp","target":"lsp","timestamp":1722706389379}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(17)}} })","module":"lsp","target":"lsp","timestamp":1722706391956}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(73)} })","module":"lsp","target":"lsp","timestamp":1722706391956}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(85)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706391956}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706391956}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706391956}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706391956}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(18)}} })","module":"lsp","target":"lsp","timestamp":1722706392065}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(85)} })","module":"lsp","target":"lsp","timestamp":1722706392067}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(90)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706392067}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706392067}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706392067}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706392067}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(19)}} })","module":"lsp","target":"lsp","timestamp":1722706392521}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(90)} })","module":"lsp","target":"lsp","timestamp":1722706392521}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(95)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706392521}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706392521}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706392521}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706392521}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(20)}} })","module":"lsp","target":"lsp","timestamp":1722706393483}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(95)} })","module":"lsp","target":"lsp","timestamp":1722706393483}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(98)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706393483}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706393483}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706393483}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706393483}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-ge id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(21)}} })","module":"lsp","target":"lsp","timestamp":1722706394265}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(98)} })","module":"lsp","target":"lsp","timestamp":1722706394265}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(101)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706394267}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706394267}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706394267}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706394267}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(22)}} })","module":"lsp","target":"lsp","timestamp":1722706395145}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(101)} })","module":"lsp","target":"lsp","timestamp":1722706395145}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(106)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706395145}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706395145}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706395145}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706395145}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(23)}} })","module":"lsp","target":"lsp","timestamp":1722706395336}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(106)} })","module":"lsp","target":"lsp","timestamp":1722706395336}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(110)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706395337}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706395337}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706395337}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706395337}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-kj id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(25)}} })","module":"lsp","target":"lsp","timestamp":1722706396399}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(110)} })","module":"lsp","target":"lsp","timestamp":1722706396399}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(114)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706396399}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396399}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396399}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396399}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-kjkl id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(27)}} })","module":"lsp","target":"lsp","timestamp":1722706396585}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(114)} })","module":"lsp","target":"lsp","timestamp":1722706396585}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(119)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(14), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706396585}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396585}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 14 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396585}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396585}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-kjklj id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(28)}} })","module":"lsp","target":"lsp","timestamp":1722706396672}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(119)} })","module":"lsp","target":"lsp","timestamp":1722706396673}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(123)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(15), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706396673}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396673}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 15 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396673}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396673}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-kjkljlk id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(30)}} })","module":"lsp","target":"lsp","timestamp":1722706396742}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(123)} })","module":"lsp","target":"lsp","timestamp":1722706396743}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(125)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(17), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706396743}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396743}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 17 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396743}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396743}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-kjkljlkj id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(31)}} })","module":"lsp","target":"lsp","timestamp":1722706396815}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(125)} })","module":"lsp","target":"lsp","timestamp":1722706396816}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(129)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(18), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706396816}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396816}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 18 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396816}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706396816}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-kjkljlk id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(32)}} })","module":"lsp","target":"lsp","timestamp":1722706397195}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(129)} })","module":"lsp","target":"lsp","timestamp":1722706397196}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(135)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(17), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706397196}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397196}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 17 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397196}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397196}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-kj id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(37)}} })","module":"lsp","target":"lsp","timestamp":1722706397586}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(135)} })","module":"lsp","target":"lsp","timestamp":1722706397586}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(139)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706397588}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397588}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397588}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397588}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-k id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(38)}} })","module":"lsp","target":"lsp","timestamp":1722706397828}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(139)} })","module":"lsp","target":"lsp","timestamp":1722706397829}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(143)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706397829}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397829}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397829}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397829}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(39)}} })","module":"lsp","target":"lsp","timestamp":1722706397994}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(143)} })","module":"lsp","target":"lsp","timestamp":1722706397995}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(147)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706397995}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397995}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397995}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706397995}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-   id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(42)}} })","module":"lsp","target":"lsp","timestamp":1722706398514}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(44)}} })","module":"lsp","target":"lsp","timestamp":1722706398972}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(147)} })","module":"lsp","target":"lsp","timestamp":1722706398972}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(151)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706398972}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706398972}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706398972}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706398972}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(151)} })","module":"lsp","target":"lsp","timestamp":1722706401172}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(155)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706401172}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706401172}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706401172}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706401172}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(45)}} })","module":"lsp","target":"lsp","timestamp":1722706405090}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(155)} })","module":"lsp","target":"lsp","timestamp":1722706405090}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(160)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706405090}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706405090}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706405090}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706405090}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(46)}} })","module":"lsp","target":"lsp","timestamp":1722706405347}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(160)} })","module":"lsp","target":"lsp","timestamp":1722706405348}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(164)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706405348}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706405348}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706405348}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706405348}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swa id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(47)}} })","module":"lsp","target":"lsp","timestamp":1722706406031}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(164)} })","module":"lsp","target":"lsp","timestamp":1722706406031}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(168)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(13), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706406031}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706406031}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706406031}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706406031}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(48)}} })","module":"lsp","target":"lsp","timestamp":1722706407103}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(168)} })","module":"lsp","target":"lsp","timestamp":1722706407103}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(170)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706407103}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706407103}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706407103}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706407103}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swa id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(49)}} })","module":"lsp","target":"lsp","timestamp":1722706407745}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(170)} })","module":"lsp","target":"lsp","timestamp":1722706407747}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(174)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(13), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706407747}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706407747}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706407747}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706407747}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swa[] id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(51)}} })","module":"lsp","target":"lsp","timestamp":1722706408214}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(174)} })","module":"lsp","target":"lsp","timestamp":1722706408215}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(178)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(14), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706408215}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706408215}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 14 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706408215}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706408215}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swa id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(53)}} })","module":"lsp","target":"lsp","timestamp":1722706408892}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(178)} })","module":"lsp","target":"lsp","timestamp":1722706408892}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(182)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(13), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706408892}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706408892}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706408892}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706408892}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swap id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(54)}} })","module":"lsp","target":"lsp","timestamp":1722706409153}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(182)} })","module":"lsp","target":"lsp","timestamp":1722706409153}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(188)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(14), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706409153}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706409153}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 14 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706409153}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706409153}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-swa id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(55)}} })","module":"lsp","target":"lsp","timestamp":1722706409803}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(188)} })","module":"lsp","target":"lsp","timestamp":1722706409804}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(190)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(13), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706409804}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706409804}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 13 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706409804}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706409804}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-sw id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(56)}} })","module":"lsp","target":"lsp","timestamp":1722706410018}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(190)} })","module":"lsp","target":"lsp","timestamp":1722706410019}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(194)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706410019}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410019}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410019}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410019}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-s id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(57)}} })","module":"lsp","target":"lsp","timestamp":1722706410170}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(194)} })","module":"lsp","target":"lsp","timestamp":1722706410170}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(200)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706410170}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410170}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410170}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410170}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(58)}} })","module":"lsp","target":"lsp","timestamp":1722706410289}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(200)} })","module":"lsp","target":"lsp","timestamp":1722706410289}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(204)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706410289}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410289}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410289}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410289}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(59)}} })","module":"lsp","target":"lsp","timestamp":1722706410425}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(204)} })","module":"lsp","target":"lsp","timestamp":1722706410425}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(208)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706410425}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410425}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410425}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410425}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(60)}} })","module":"lsp","target":"lsp","timestamp":1722706410626}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(208)} })","module":"lsp","target":"lsp","timestamp":1722706410628}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(212)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706410628}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410628}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410628}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706410628}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(61)}} })","module":"lsp","target":"lsp","timestamp":1722706410730}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(62)}} })","module":"lsp","target":"lsp","timestamp":1722706411169}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(212)} })","module":"lsp","target":"lsp","timestamp":1722706411171}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(217)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706411171}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706411171}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706411171}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706411171}
{"file":"lsp/src/lib.rs","level":"WARN","line":150,"message":"shutting down server","module":"lsp","target":"lsp","timestamp":1722706606403}
{"level":"INFO","message":"starting generic LSP server","target":"lsp","timestamp":1722706607784}
{"level":"INFO","message":"STARTING EXAMPLE MAIN LOOP","target":"lsp","timestamp":1722706608234}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didOpen\", params: Object {\"textDocument\": Object {\"languageId\": String(\"html\"), \"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\"), \"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(1)}} })","module":"lsp","target":"lsp","timestamp":1722706608234}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didOpen\", params: Object {\"textDocument\": Object {\"languageId\": String(\"html\"), \"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\"), \"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(1)}} })","module":"lsp","target":"lsp","timestamp":1722706608234}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"workspace/didChangeConfiguration\", params: Object {\"settings\": Null} })","module":"lsp","target":"lsp","timestamp":1722706608234}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(16)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706610607}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706610607}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706610607}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706610607}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(2)}} })","module":"lsp","target":"lsp","timestamp":1722706610719}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(3)}} })","module":"lsp","target":"lsp","timestamp":1722706610992}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(22)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706610992}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706610992}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706610992}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706610992}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(4)}} })","module":"lsp","target":"lsp","timestamp":1722706611078}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(22)} })","module":"lsp","target":"lsp","timestamp":1722706611084}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(25)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706611084}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706611084}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706611084}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706611084}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(5)}} })","module":"lsp","target":"lsp","timestamp":1722706611564}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(25)} })","module":"lsp","target":"lsp","timestamp":1722706611564}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(30)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706611566}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706611566}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706611566}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706611566}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(6)}} })","module":"lsp","target":"lsp","timestamp":1722706612053}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(30)} })","module":"lsp","target":"lsp","timestamp":1722706612054}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(34)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706612054}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706612054}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706612054}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706612054}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(7)}} })","module":"lsp","target":"lsp","timestamp":1722706613268}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(34)} })","module":"lsp","target":"lsp","timestamp":1722706613268}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(38)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706613269}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613269}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613269}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613269}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(8)}} })","module":"lsp","target":"lsp","timestamp":1722706613396}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(38)} })","module":"lsp","target":"lsp","timestamp":1722706613397}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(41)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706613397}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613397}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613397}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613397}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(9)}} })","module":"lsp","target":"lsp","timestamp":1722706613537}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(41)} })","module":"lsp","target":"lsp","timestamp":1722706613537}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(44)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706613537}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613537}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613537}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613537}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(10)}} })","module":"lsp","target":"lsp","timestamp":1722706613667}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(11)}} })","module":"lsp","target":"lsp","timestamp":1722706613961}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(44)} })","module":"lsp","target":"lsp","timestamp":1722706613961}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(51)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706613961}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613961}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613961}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706613961}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(51)} })","module":"lsp","target":"lsp","timestamp":1722706824599}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(76)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706824599}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706824599}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706824599}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706824599}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(12)}} })","module":"lsp","target":"lsp","timestamp":1722706824791}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(13)}} })","module":"lsp","target":"lsp","timestamp":1722706824989}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(76)} })","module":"lsp","target":"lsp","timestamp":1722706824989}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(80)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706824989}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706824989}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706824989}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706824989}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(14)}} })","module":"lsp","target":"lsp","timestamp":1722706825066}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(80)} })","module":"lsp","target":"lsp","timestamp":1722706825067}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(85)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706825067}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825067}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825067}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825067}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(15)}} })","module":"lsp","target":"lsp","timestamp":1722706825295}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(85)} })","module":"lsp","target":"lsp","timestamp":1722706825295}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(88)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706825295}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825295}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825295}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825295}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(16)}} })","module":"lsp","target":"lsp","timestamp":1722706825664}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(88)} })","module":"lsp","target":"lsp","timestamp":1722706825664}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(93)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706825665}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825665}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825665}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825665}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-ge id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(17)}} })","module":"lsp","target":"lsp","timestamp":1722706825768}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(93)} })","module":"lsp","target":"lsp","timestamp":1722706825768}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(98)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(12), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706825768}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825768}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 12 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825768}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706825768}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx-g id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(18)}} })","module":"lsp","target":"lsp","timestamp":1722706826501}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(98)} })","module":"lsp","target":"lsp","timestamp":1722706826501}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(101)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(11), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706826501}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826501}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 11 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826501}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826501}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx- id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(19)}} })","module":"lsp","target":"lsp","timestamp":1722706826648}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(101)} })","module":"lsp","target":"lsp","timestamp":1722706826650}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(105)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(10), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706826650}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826650}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 10 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826650}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826650}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div hx id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(20)}} })","module":"lsp","target":"lsp","timestamp":1722706826790}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(105)} })","module":"lsp","target":"lsp","timestamp":1722706826790}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(108)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(9), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706826790}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826790}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 9 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826791}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826791}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div h id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(21)}} })","module":"lsp","target":"lsp","timestamp":1722706826918}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(108)} })","module":"lsp","target":"lsp","timestamp":1722706826919}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(112)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(8), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706826919}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826919}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 8 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826919}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706826919}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div  id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(22)}} })","module":"lsp","target":"lsp","timestamp":1722706827055}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"textDocument/didChange\", params: Object {\"contentChanges\": Array [Object {\"text\": String(\"<!doctype html>\\n<html lang=\\\"en\\\">\\n\\n<head>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n  <title>Vite + React + TS</title>\\n</head>\\n\\n<body class=\\\"m-0 p-0\\\">\\n  <div id=\\\"root\\\" class=\\\"grid grid-cols-2 m-0 p-0 font-mono bg-slate-100\\\"></div>\\n  <script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n</body>\\n\\n</html>\\n\")}], \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\"), \"version\": Number(23)}} })","module":"lsp","target":"lsp","timestamp":1722706827489}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Notification(Notification { method: \"$/cancelRequest\", params: Object {\"id\": Number(112)} })","module":"lsp","target":"lsp","timestamp":1722706827489}
{"file":"lsp/src/lib.rs","level":"ERROR","line":59,"message":"connection received message: Request(Request { id: RequestId(I32(119)), method: \"textDocument/completion\", params: Object {\"position\": Object {\"character\": Number(6), \"line\": Number(11)}, \"textDocument\": Object {\"uri\": String(\"file:///home/savvy/rs-school/hooks-and-routing/index.html\")}} })","module":"lsp","target":"lsp","timestamp":1722706827489}
{"file":"lsp/src/handle.rs","level":"ERROR","line":167,"message":"handle_request","module":"lsp::handle","target":"lsp::handle","timestamp":1722706827489}
{"file":"lsp/src/handle.rs","level":"ERROR","line":112,"message":"handle_completion: CompletionParams { text_document_position: TextDocumentPositionParams { text_document: TextDocumentIdentifier { uri: Url { scheme: \"file\", cannot_be_a_base: false, username: \"\", password: None, host: None, port: None, path: \"/home/savvy/rs-school/hooks-and-routing/index.html\", query: None, fragment: None } }, position: Position { line: 11, character: 6 } }, work_done_progress_params: WorkDoneProgressParams { work_done_token: None }, partial_result_params: PartialResultParams { partial_result_token: None }, context: None }","module":"lsp::handle","target":"lsp::handle","timestamp":1722706827489}
{"file":"lsp/src/handle.rs","level":"ERROR","line":142,"message":"unhandled completion context: None","module":"lsp::handle","target":"lsp::handle","timestamp":1722706827489}
{"file":"lsp/src/lib.rs","level":"WARN","line":150,"message":"shutting down server","module":"lsp","target":"lsp","timestamp":1722706861820}
